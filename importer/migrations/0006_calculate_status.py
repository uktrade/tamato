# Generated by Django 3.2.19 on 2023-06-06 17:10

from django.db import migrations
from django.db.models import Count
from django.db.models import Q


class Migration(migrations.Migration):
    dependencies = [
        ("importer", "0005_importbatch_status"),
    ]

    def update_status_field_value(apps, schema_editor):
        """Calculate the status field's value by determining if there are any
        chunks that were not successful."""
        ImportBatch = apps.get_model("importer", "ImportBatch")
        import_batch_qs = (
            ImportBatch.objects.filter(
                status="IMPORTING",
            )
            .annotate(
                total_chunks_count=Count("chunks"),
            )
            .annotate(
                not_done_chunks_count=Count(
                    "chunks",
                    filter=~Q(
                        # 3=ImporterChunkStatus.DONE
                        chunks__status=3,
                    ),
                ),
            )
            .annotate(
                errored_chunks_count=Count(
                    "chunks",
                    filter=~Q(
                        # 4=ImporterChunkStatus.ERRORED
                        chunks__status=4,
                    ),
                ),
            )
        )

        for ib in import_batch_qs:
            if ib.total_chunks_count and not ib.not_done_chunks_count:
                # All chunks have completed successfully.
                ib.status = "SUCCEEDED"
                ib.save()
            elif ib.errored_chunks_count:
                # At leave one chunk has errored.
                ib.status = "FAILED"
                ib.save()
            else:
                # Indeterminate state so leave as is.
                pass

    def reverse_status_field_value(apps, schema_editor):
        ImportBatch = apps.get_model("importer", "ImportBatch")
        import_batch_qs = ImportBatch.objects.annotate(
            total_chunks_count=Count("chunks"),
        ).filter(
            total_chunks_count__gt=0,
        )
        # Revert all ImportBatch instances with ImporterXMLChunk related
        # instances to the previous migration's default value,
        # ImportBatchStatus.IMPORTING.
        import_batch_qs.update(status="IMPORTING")

    operations = [
        migrations.RunPython(
            update_status_field_value,
            reverse_status_field_value,
        ),
    ]
