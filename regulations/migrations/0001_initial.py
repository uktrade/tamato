# Generated by Django 3.0.7 on 2020-06-16 15:14

import django.contrib.postgres.fields.ranges
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("common", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Amendment",
            fields=[
                (
                    "trackedmodel_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="common.TrackedModel",
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects",},
            bases=("common.trackedmodel",),
        ),
        migrations.CreateModel(
            name="Extension",
            fields=[
                (
                    "trackedmodel_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="common.TrackedModel",
                    ),
                ),
                ("effective_end_date", models.DateField(null=True)),
            ],
            options={"abstract": False, "base_manager_name": "objects",},
            bases=("common.trackedmodel",),
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "trackedmodel_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="common.TrackedModel",
                    ),
                ),
                (
                    "valid_between",
                    django.contrib.postgres.fields.ranges.DateTimeRangeField(),
                ),
                (
                    "group_id",
                    models.CharField(
                        editable=False,
                        max_length=3,
                        validators=[
                            django.core.validators.RegexValidator("[A-Z][A-Z][A-Z]")
                        ],
                    ),
                ),
                ("description", models.CharField(editable=False, max_length=500)),
            ],
            options={"abstract": False, "base_manager_name": "objects",},
            bases=("common.trackedmodel", models.Model),
        ),
        migrations.CreateModel(
            name="Regulation",
            fields=[
                (
                    "trackedmodel_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="common.TrackedModel",
                    ),
                ),
                (
                    "role_type",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Base"),
                            (2, "Provisional Anti-Dumping"),
                            (3, "Definitive Anti-Dumping"),
                            (4, "Modification"),
                            (5, "Prorogation"),
                            (6, "Complete Abrogation"),
                            (7, "Explicit Abrogation"),
                            (8, "Full Temporary Stop"),
                        ],
                        default=1,
                        editable=False,
                    ),
                ),
                (
                    "regulation_id",
                    models.CharField(
                        editable=False,
                        max_length=8,
                        validators=[
                            django.core.validators.RegexValidator(
                                "(?x)\n    (?P<prefix>C|R|D|A|I|J|P|U|S|X|N|M|Q)\n    (?P<year>\\d{2})\n    (?P<number>\\d{4})\n    (?P<suffix>[0-9A-Z])\n"
                            )
                        ],
                    ),
                ),
                (
                    "official_journal_number",
                    models.CharField(
                        blank=True, default="1", editable=False, max_length=5, null=True
                    ),
                ),
                (
                    "official_journal_page",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        default=1,
                        editable=False,
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(9999)],
                    ),
                ),
                (
                    "published_at",
                    models.DateField(blank=True, editable=False, null=True),
                ),
                (
                    "information_text",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[^|]*$", "Must not contain '|'"
                            )
                        ],
                    ),
                ),
                (
                    "public_identifier",
                    models.CharField(
                        blank=True,
                        help_text="This is the name of the regulation as it would appear on (for example) legislation.gov.uk",
                        max_length=50,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[^|]*$", "Must not contain '|'"
                            )
                        ],
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True,
                        help_text="Please enter the absolute URL of the regulation",
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[^|]*$", "Must not contain '|'"
                            )
                        ],
                    ),
                ),
                ("approved", models.BooleanField(default=False)),
                (
                    "replacement_indicator",
                    models.PositiveIntegerField(
                        choices=[
                            (0, "Not Replaced"),
                            (1, "Replaced"),
                            (2, "Partially Replaced"),
                        ],
                        default=0,
                        editable=False,
                    ),
                ),
                (
                    "valid_between",
                    django.contrib.postgres.fields.ranges.DateTimeRangeField(
                        blank=True, null=True
                    ),
                ),
                (
                    "effective_end_date",
                    models.DateField(blank=True, editable=False, null=True),
                ),
                ("stopped", models.BooleanField(default=False)),
                (
                    "community_code",
                    models.PositiveIntegerField(
                        blank=True,
                        choices=[
                            (1, "Economic"),
                            (2, "Atomic"),
                            (3, "Coal"),
                            (4, "Economic/Coal"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "amends",
                    models.ManyToManyField(
                        related_name="_regulation_amends_+",
                        through="regulations.Amendment",
                        to="regulations.Regulation",
                    ),
                ),
                (
                    "extends",
                    models.ManyToManyField(
                        related_name="_regulation_extends_+",
                        through="regulations.Extension",
                        to="regulations.Regulation",
                    ),
                ),
                (
                    "regulation_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="regulations.Group",
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects",},
            bases=("common.trackedmodel",),
        ),
        migrations.CreateModel(
            name="Termination",
            fields=[
                (
                    "trackedmodel_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="common.TrackedModel",
                    ),
                ),
                ("effective_date", models.DateField()),
                (
                    "enacting_regulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="regulations.Regulation",
                    ),
                ),
                (
                    "target_regulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="terminations",
                        to="regulations.Regulation",
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects",},
            bases=("common.trackedmodel",),
        ),
        migrations.CreateModel(
            name="Suspension",
            fields=[
                (
                    "trackedmodel_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="common.TrackedModel",
                    ),
                ),
                ("effective_end_date", models.DateField(null=True)),
                (
                    "enacting_regulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="regulations.Regulation",
                    ),
                ),
                (
                    "target_regulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="suspensions",
                        to="regulations.Regulation",
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects",},
            bases=("common.trackedmodel",),
        ),
        migrations.CreateModel(
            name="Replacement",
            fields=[
                (
                    "trackedmodel_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="common.TrackedModel",
                    ),
                ),
                ("measure_type_id", models.CharField(max_length=6, null=True)),
                ("geographical_area_id", models.CharField(max_length=4, null=True)),
                ("chapter_heading", models.CharField(max_length=2, null=True)),
                (
                    "enacting_regulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="regulations.Regulation",
                    ),
                ),
                (
                    "target_regulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="replacements",
                        to="regulations.Regulation",
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects",},
            bases=("common.trackedmodel",),
        ),
        migrations.AddField(
            model_name="regulation",
            name="replaces",
            field=models.ManyToManyField(
                related_name="_regulation_replaces_+",
                through="regulations.Replacement",
                to="regulations.Regulation",
            ),
        ),
        migrations.AddField(
            model_name="regulation",
            name="suspends",
            field=models.ManyToManyField(
                related_name="_regulation_suspends_+",
                through="regulations.Suspension",
                to="regulations.Regulation",
            ),
        ),
        migrations.AddField(
            model_name="regulation",
            name="terminates",
            field=models.ManyToManyField(
                related_name="_regulation_terminates_+",
                through="regulations.Termination",
                to="regulations.Regulation",
            ),
        ),
        migrations.AddField(
            model_name="extension",
            name="enacting_regulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="regulations.Regulation",
            ),
        ),
        migrations.AddField(
            model_name="extension",
            name="target_regulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="extensions",
                to="regulations.Regulation",
            ),
        ),
        migrations.AddField(
            model_name="amendment",
            name="enacting_regulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="regulations.Regulation",
            ),
        ),
        migrations.AddField(
            model_name="amendment",
            name="target_regulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="amendments",
                to="regulations.Regulation",
            ),
        ),
    ]
