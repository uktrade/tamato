# Generated by Django 3.2.18 on 2023-03-28 15:39

from django.conf import settings
from django.core.paginator import Paginator
from django.db import migrations
from django.db.transaction import atomic

batch_size = 10000


@atomic
def generate_timestamps(apps, schema_editor):
    if settings.ENV == "test":
        return

    TrackedModel = apps.get_model("common", "trackedmodel")
    all_models = TrackedModel.objects.select_related("transaction").all()
    paginator = Paginator(all_models, batch_size)
    print(f"Tottal: {paginator.num_pages}")
    for page_num in range(1, paginator.num_pages + 1):
        print(f"number {page_num}")
        with atomic():
            for tracked_model in paginator.page(page_num).object_list:
                tracked_model.created_at = tracked_model.transaction.created_at
                tracked_model.updated_at = tracked_model.transaction.updated_at
                tracked_model.save()


def reverse_timestamps(apps, schema_editor):
    # generate_timestamps() generates timestamps,
    # so reverse_timestamps() should delete them.
    if settings.ENV == "test":
        return


class Migration(migrations.Migration):
    dependencies = [
        ("common", "0008_auto_20231211_1642"),
    ]

    operations = [
        migrations.RunPython(generate_timestamps, reverse_timestamps),
    ]
