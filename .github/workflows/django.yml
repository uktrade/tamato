name: CI/CD

on:
  push:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
      # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node
      uses: actions/setup-node@v1
      with:
        node-version: "12.18.2"

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        npm install

    - name: Collect static assets
      run: |
        npm run build
        python manage.py collectstatic --noinput

    - name: Run Tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
        DJANGO_SETTINGS_MODULE: settings.test
      run: |
        python manage.py test -- --cov --cov-report=xml --alluredir=allure-results

    - name: Run Linter
      run: |
        black --check .

    - name: Report code coverage
      uses: codecov/codecov-action@v1

    - name: Generate test result report
      uses: afiore/action-allure-report@v0.1.0

    - name: Upload test result report
      uses: actions/upload-artifact@v1
      with:
        name: test-results-report
        path: allure-report

    - name: Start deployment
      uses: bobheadxi/deployments@v0.4.0
      id: deployment
      with:
        step: start
        token: ${{secrets.GITHUB_TOKEN}}
        env: development

    - name: Deploy to development environment
      uses: d3sandoval/cloud-foundry-action@1.1.1
      env:
        CF_API: ${{secrets.CF_API}}
        CF_PASSWORD: ${{secrets.CF_PASSWORD}}
        CF_TARGET_ORG: ${{secrets.CF_TARGET_ORG}}
        CF_TARGET_SPACE: ${{secrets.CF_TARGET_SPACE}}
        CF_USERNAME: ${{secrets.CF_USERNAME}}
      with:
        args: push tamato-dev

    - name: Update deployment status
      uses: bobheadxi/deployments@v0.4.0
      if: always()
      with:
        step: finish
        token: ${{secrets.GITHUB_TOKEN}}
        status: ${{job.status}}
        deployment_id: ${{steps.deployment.outputs.deployment_id}}
        env: ${{steps.deployment.outputs.env}}
        env_url: https://tamato-dev.london.cloudapps.digital
    
    - name: Sphinx Build
      uses: ammaraskar/sphinx-action@0.4
    
    - name: Commit documentation changes
      run: |
        git clone https://github.com/ammaraskar/sphinx-action-test.git --branch gh-pages --single-branch gh-pages
        cp -r docs/_build/html/* gh-pages/
        cd gh-pages
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Update documentation" -a || true
        # The above command will fail if no changes were present, so we ignore
        # that.
    
    - name: Push documentation changes
      uses: ad-m/github-push-action@master
      with:
        branch: gh-pages
        directory: gh-pages
        github_token: ${{ secrets.GITHUB_TOKEN }}
