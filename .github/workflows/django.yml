name: CI/CD

on: 
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    name: "Run tests"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        group: [1, 2, 3, 4]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v2

    - name: Detect runtime versions
      id: runtimes
      run: |
        echo "::set-output name=node-version::$(cat ./package.json | jq -r '.engines.node')"
        echo "::set-output name=python-version::$(cat ./runtime.txt | grep -Eo '[0-9]+\.[0-9]+')"

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ steps.runtimes.outputs.python-version }}

    - name: Set up Node
      uses: actions/setup-node@v1
      with:
        node-version: ${{ steps.runtimes.outputs.node-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        npm install

    - name: Collect static assets
      run: |
        npm run build
        python manage.py collectstatic --noinput

    - name: Check for missing migrations
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
        DJANGO_SETTINGS_MODULE: settings.test
      run: |
        python manage.py makemigrations --dry-run --check

    - name: Run tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
        DJANGO_SETTINGS_MODULE: settings.test
        TEST_OPTS: -n0 --splits 4 --group ${{ matrix.group }}
      run: |
        make test

    - name: Report code coverage
      uses: codecov/codecov-action@v1

  lint:
    name: "Lint and static checks"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Detect runtime versions
      id: runtimes
      run: |
        echo "::set-output name=node-version::$(cat ./package.json | jq -r '.engines.node')"
        echo "::set-output name=python-version::$(cat ./runtime.txt | grep -Eo '[0-9]+\.[0-9]+')"

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ steps.runtimes.outputs.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linter
      run: |
        black --check .

  docs:
    name: "Build documentation"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Detect runtime versions
      id: runtimes
      run: |
        echo "::set-output name=node-version::$(cat ./package.json | jq -r '.engines.node')"
        echo "::set-output name=python-version::$(cat ./runtime.txt | grep -Eo '[0-9]+\.[0-9]+')"

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ steps.runtimes.outputs.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build documentation
      uses: ammaraskar/sphinx-action@0.4
      with:
        pre-build-command: "apt-get update -y && apt-get install -y git-core python-dev build-essential libxml2-dev libxslt1-dev libz-dev graphviz libgraphviz-dev libpq-dev libffi-dev"
        docs-folder: "."
        build-command: "sphinx-build -b html -c docs/ . _build"

    - name: Publish documentation to Github Pages
      if: ${{ github.ref == 'refs/heads/master' }}
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: _build
