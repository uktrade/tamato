from django.core.exceptions import ValidationError
from django.db import models
from django.utils.deconstruct import deconstructible


@deconstructible
class NumberRangeValidator:
    """Validates a value is a number within a specified (inclusive) range."""

    def __init__(self, min_value, max_value):
        self.min_value = min_value
        self.max_value = max_value

    def __call__(self, value):
        if not (self.min_value <= value <= self.max_value):
            raise ValidationError(
                "%(value)s is not between %(min)s and %(max)s.",
                params={"value": value, "min": self.min_value, "max": self.max_value},
            )

    def __eq__(self, other):
        if isinstance(other, NumberRangeValidator):
            return (
                other.min_value == self.min_value and other.max_value == self.max_value
            )
        return False


class NumericSIDValidator(NumberRangeValidator):
    """Validates TARIC SID values.

    A TARIC SID is a unique number generated by the system as an internal access key.
    This will be used in areas where there is a need to change access key data
    dynamically, or where the logical key is too long.

    It is commonly a number between 1 and 99999999 (max 8 digits).
    """

    def __init__(self, max_value=99999999):
        super().__init__(1, max_value)


class UpdateType(models.IntegerChoices):
    UPDATE = 1, "Update"
    DELETE = 2, "Delete"
    CREATE = 3, "Create"


class ApplicabilityCode(models.IntegerChoices):
    PERMITTED = 0, "Permitted"
    MANDATORY = 1, "Mandatory"
    NOT_PERMITTED = 2, "Not permitted"
