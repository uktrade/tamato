# Generated by Django 4.2.15 on 2024-10-08 15:32
# Create the multiple database views needed for the measure report.
# Only one view is mapped to a model, the other are used by the final view
from django.db import migrations

additional_codes__expanded_sql = """
CREATE MATERIALIZED VIEW additional_codes__expanded AS
 WITH RECURSIVE additional_codes_additionalcodedescription__now AS (
         WITH RECURSIVE cte AS (
                 SELECT common_tracked_models_2.id,
                    common_tracked_models_2.polymorphic_ctype_id,
                    common_tracked_models_2.transaction_id,
                    common_tracked_models_2.update_type,
                    common_tracked_models_2.version_group_id,
                    additional_code_descriptions_1.trackedmodel_ptr_id,
                    additional_code_descriptions_1.validity_start,
                    additional_code_descriptions_1.sid,
                    additional_code_descriptions_1.described_additionalcode_id,
                    additional_code_descriptions_1.description,
                    ((NULLIF(max(additional_code_descriptions_1.validity_start) OVER (PARTITION BY additional_codes_1.sid ORDER BY additional_code_descriptions_1.validity_start ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING), additional_code_descriptions_1.validity_start) - '1 day'::interval))::date AS validity_end,
                    daterange(additional_code_descriptions_1.validity_start, ((NULLIF(max(additional_code_descriptions_1.validity_start) OVER (PARTITION BY additional_codes_1.sid ORDER BY additional_code_descriptions_1.validity_start ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING), additional_code_descriptions_1.validity_start) - '1 day'::interval))::date, '[]'::text) AS valid_between
                   FROM (((additional_codes_additionalcodedescription additional_code_descriptions_1
                     JOIN common_trackedmodel common_tracked_models_2 ON ((additional_code_descriptions_1.trackedmodel_ptr_id = common_tracked_models_2.id)))
                     JOIN common_versiongroup common_version_groups_1 ON ((common_tracked_models_2.id = common_version_groups_1.current_version_id)))
                     JOIN additional_codes_additionalcode additional_codes_1 ON ((additional_code_descriptions_1.described_additionalcode_id = additional_codes_1.trackedmodel_ptr_id)))
                  WHERE ((common_version_groups_1.id IS NOT NULL) AND (NOT (common_tracked_models_2.update_type = 2)))
                  ORDER BY additional_code_descriptions_1.validity_start
                )
         SELECT common_tracked_models_1.id,
            common_tracked_models_1.polymorphic_ctype_id,
            common_tracked_models_1.transaction_id,
            common_tracked_models_1.update_type,
            common_tracked_models_1.version_group_id,
            additional_code_descriptions.trackedmodel_ptr_id,
            additional_code_descriptions.validity_start,
            additional_code_descriptions.sid,
            additional_code_descriptions.described_additionalcode_id,
            additional_code_descriptions.description,
            cte.validity_end,
            cte.valid_between
           FROM ((additional_codes_additionalcodedescription additional_code_descriptions
             JOIN common_trackedmodel common_tracked_models_1 ON ((additional_code_descriptions.trackedmodel_ptr_id = common_tracked_models_1.id)))
             JOIN cte ON ((additional_code_descriptions.trackedmodel_ptr_id = cte.trackedmodel_ptr_id)))
          WHERE ((upper(cte.valid_between) > CURRENT_DATE) OR (upper(cte.valid_between) IS NULL))
          ORDER BY additional_code_descriptions.validity_start
        )
 SELECT additional_codes.trackedmodel_ptr_id,
    additional_code_types.sid AS type_id,
    additional_codes.code,
    additional_codes_additionalcodedescription__now.description
   FROM ((((additional_codes_additionalcode additional_codes
     JOIN common_trackedmodel common_tracked_models ON ((additional_codes.trackedmodel_ptr_id = common_tracked_models.id)))
     JOIN additional_codes_additionalcodetype additional_code_types ON ((additional_codes.type_id = additional_code_types.trackedmodel_ptr_id)))
     JOIN common_versiongroup common_version_groups ON ((common_tracked_models.id = common_version_groups.current_version_id)))
     JOIN additional_codes_additionalcodedescription__now ON ((additional_codes.trackedmodel_ptr_id = additional_codes_additionalcodedescription__now.described_additionalcode_id)))
  WHERE ((common_version_groups.id IS NOT NULL) AND (NOT (common_tracked_models.update_type = 2)))
  WITH NO DATA;


ALTER MATERIALIZED VIEW additional_codes__expanded OWNER TO postgres;

"""

commodities_sql = """

CREATE MATERIALIZED VIEW commodities_goodsnomenclaturedescription__now AS
 WITH RECURSIVE cte AS (
         SELECT common_tracked_models.id,
            common_tracked_models.polymorphic_ctype_id,
            common_tracked_models.transaction_id,
            common_tracked_models.update_type,
            common_tracked_models.version_group_id,
            commodity_descriptions.trackedmodel_ptr_id,
            commodity_descriptions.validity_start,
            commodity_descriptions.sid,
            commodities.trackedmodel_ptr_id AS described_goods_nomenclature_id,
            commodity_descriptions.description,
            ((NULLIF(max(commodity_descriptions.validity_start) OVER (PARTITION BY commodities.sid ORDER BY commodity_descriptions.validity_start ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING), commodity_descriptions.validity_start) - '1 day'::interval))::date AS validity_end,
            daterange(commodity_descriptions.validity_start, ((NULLIF(max(commodity_descriptions.validity_start) OVER (PARTITION BY commodities.sid ORDER BY commodity_descriptions.validity_start ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING), commodity_descriptions.validity_start) - '1 day'::interval))::date, '[]'::text) AS valid_between
           FROM (((((commodities_goodsnomenclaturedescription commodity_descriptions
             JOIN common_trackedmodel common_tracked_models ON ((commodity_descriptions.trackedmodel_ptr_id = common_tracked_models.id)))
             JOIN common_versiongroup common_version_groups ON ((common_tracked_models.id = common_version_groups.current_version_id)))
             JOIN common_trackedmodel described_goods_nomenclature__tracked_models ON ((commodity_descriptions.described_goods_nomenclature_id = described_goods_nomenclature__tracked_models.id)))
             JOIN common_versiongroup described_goods_nomenclature__version_groups ON ((described_goods_nomenclature__tracked_models.version_group_id = described_goods_nomenclature__version_groups.id)))
             JOIN commodities_goodsnomenclature commodities ON ((described_goods_nomenclature__version_groups.current_version_id = commodities.trackedmodel_ptr_id)))
          WHERE ((common_version_groups.id IS NOT NULL) AND (NOT (common_tracked_models.update_type = 2)))
          ORDER BY commodity_descriptions.validity_start
        )
 SELECT described_goods_nomenclature_id,
    description
   FROM cte
  WHERE ((upper(valid_between) > CURRENT_DATE) OR (upper(valid_between) IS NULL))
  WITH NO DATA;


ALTER MATERIALIZED VIEW commodities_goodsnomenclaturedescription__now OWNER TO postgres;


"""

indent_sql = """

CREATE MATERIALIZED VIEW commodities_goodsnomenclatureindent__now AS
 WITH RECURSIVE cte AS (
         SELECT common_tracked_models_1.id,
            common_tracked_models_1.polymorphic_ctype_id,
            common_tracked_models_1.transaction_id,
            common_tracked_models_1.update_type,
            common_tracked_models_1.version_group_id,
            commodity_indents_1.trackedmodel_ptr_id,
            commodity_indents_1.validity_start,
            commodity_indents_1.sid,
            commodity_indents_1.indent,
            commodities.trackedmodel_ptr_id AS indented_goods_nomenclature_id,
            ((NULLIF(max(commodity_indents_1.validity_start) OVER (PARTITION BY commodities.sid ORDER BY commodity_indents_1.validity_start ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING), commodity_indents_1.validity_start) - '1 day'::interval))::date AS validity_end,
            daterange(commodity_indents_1.validity_start, ((NULLIF(max(commodity_indents_1.validity_start) OVER (PARTITION BY commodities.sid ORDER BY commodity_indents_1.validity_start ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING), commodity_indents_1.validity_start) - '1 day'::interval))::date, '[]'::text) AS valid_between
           FROM (((((commodities_goodsnomenclatureindent commodity_indents_1
             JOIN common_trackedmodel common_tracked_models_1 ON ((commodity_indents_1.trackedmodel_ptr_id = common_tracked_models_1.id)))
             JOIN common_versiongroup ON ((common_tracked_models_1.id = common_versiongroup.current_version_id)))
             JOIN common_trackedmodel indented_goods_nomenclature__tracked_models ON ((commodity_indents_1.indented_goods_nomenclature_id = indented_goods_nomenclature__tracked_models.id)))
             JOIN common_versiongroup indented_goods_nomenclature__version_groups ON ((indented_goods_nomenclature__tracked_models.version_group_id = indented_goods_nomenclature__version_groups.id)))
             JOIN commodities_goodsnomenclature commodities ON ((indented_goods_nomenclature__version_groups.current_version_id = commodities.trackedmodel_ptr_id)))
          WHERE ((common_versiongroup.id IS NOT NULL) AND (NOT (common_tracked_models_1.update_type = 2)))
          ORDER BY commodity_indents_1.validity_start
        )
 SELECT indented_goods_nomenclature_id,
    indent
   FROM cte
  WHERE ((upper(valid_between) > CURRENT_DATE) OR (upper(valid_between) IS NULL))
  ORDER BY validity_start
  WITH NO DATA;


ALTER MATERIALIZED VIEW commodities_goodsnomenclatureindent__now OWNER TO postgres;

"""

conditions_sql = """

CREATE MATERIALIZED VIEW conditions AS
 SELECT measure_conditions.dependent_measure_id,
    measure_common_version_groups.current_version_id AS current_dependent_measure_id,
    string_agg(concat_ws(','::text, concat('condition:', measure_condition_codes.code),
        CASE
            WHEN (measure_conditions.required_certificate_id IS NULL) THEN NULL::text
            ELSE concat('certificate:', concat(certificate_types.sid, certificates.sid))
        END, concat('action:', measure_actions.code)), '|'::text ORDER BY measure_condition_codes.code, measure_conditions.component_sequence_number) AS condition_text
   FROM ((((((((measures_measurecondition measure_conditions
     JOIN common_trackedmodel common_tracked_models ON ((measure_conditions.trackedmodel_ptr_id = common_tracked_models.id)))
     JOIN common_versiongroup common_version_groups ON ((common_tracked_models.id = common_version_groups.current_version_id)))
     JOIN measures_measureconditioncode measure_condition_codes ON ((measure_conditions.condition_code_id = measure_condition_codes.trackedmodel_ptr_id)))
     JOIN common_trackedmodel measure_common_tracked_models ON ((measure_conditions.dependent_measure_id = measure_common_tracked_models.id)))
     JOIN common_versiongroup measure_common_version_groups ON ((measure_common_tracked_models.version_group_id = measure_common_version_groups.id)))
     LEFT JOIN certificates_certificate certificates ON ((measure_conditions.required_certificate_id = certificates.trackedmodel_ptr_id)))
     LEFT JOIN certificates_certificatetype certificate_types ON ((certificates.certificate_type_id = certificate_types.trackedmodel_ptr_id)))
     LEFT JOIN measures_measureaction measure_actions ON ((measure_conditions.action_id = measure_actions.trackedmodel_ptr_id)))
  WHERE ((common_version_groups.id IS NOT NULL) AND (NOT (common_tracked_models.update_type = 2)))
  GROUP BY measure_conditions.dependent_measure_id, measure_common_version_groups.current_version_id
  WITH NO DATA;


ALTER MATERIALIZED VIEW conditions OWNER TO postgres;

"""

duty_sentence_sql = """

CREATE MATERIALIZED VIEW duty_sentences AS
 SELECT measure_trackedmodel.version_group_id,
    string_agg(TRIM(BOTH FROM concat(
        CASE
            WHEN ((measure_duty_expressions.prefix IS NULL) OR ((measure_duty_expressions.prefix)::text = ''::text)) THEN ''::text
            ELSE concat(measure_duty_expressions.prefix, ' ')
        END, concat(measure_components.duty_amount, concat(
        CASE
            WHEN ((measure_components.duty_amount IS NOT NULL) AND (measure_components.monetary_unit_id IS NULL)) THEN '%'::text
            WHEN (measure_components.duty_amount IS NULL) THEN ''::text
            ELSE concat(' ', measure_monetary_units.code)
        END, concat(
        CASE
            WHEN ((measure_components.component_measurement_id IS NULL) OR (measure_measurements.measurement_unit_id IS NULL) OR (measure_measurement_units.abbreviation IS NULL)) THEN ''::text
            WHEN (measure_components.monetary_unit_id IS NULL) THEN (measure_measurement_units.abbreviation)::text
            ELSE concat(' / ', measure_measurement_units.abbreviation)
        END,
        CASE
            WHEN (measure_measurement_qualifiers.abbreviation IS NULL) THEN ''::text
            ELSE concat(' / ', measure_measurement_qualifiers.abbreviation)
        END))))), ' '::text ORDER BY measure_duty_expressions.sid) AS duty_sentence
   FROM ((((((((measures_measurecomponent measure_components
     LEFT JOIN measures_dutyexpression measure_duty_expressions ON ((measure_components.duty_expression_id = measure_duty_expressions.trackedmodel_ptr_id)))
     LEFT JOIN measures_monetaryunit measure_monetary_units ON ((measure_components.monetary_unit_id = measure_monetary_units.trackedmodel_ptr_id)))
     LEFT JOIN measures_measurement measure_measurements ON ((measure_components.component_measurement_id = measure_measurements.trackedmodel_ptr_id)))
     LEFT JOIN measures_measurementunit measure_measurement_units ON ((measure_measurements.measurement_unit_id = measure_measurement_units.trackedmodel_ptr_id)))
     LEFT JOIN measures_measurementunitqualifier measure_measurement_qualifiers ON ((measure_measurements.measurement_unit_qualifier_id = measure_measurement_qualifiers.trackedmodel_ptr_id)))
     JOIN common_trackedmodel common_tracked_models ON ((measure_components.trackedmodel_ptr_id = common_tracked_models.id)))
     JOIN common_versiongroup common_version_groups ON ((common_tracked_models.id = common_version_groups.current_version_id)))
     JOIN common_trackedmodel measure_trackedmodel ON ((measure_components.component_measure_id = measure_trackedmodel.id)))
  WHERE ((common_version_groups.id IS NOT NULL) AND (NOT (common_tracked_models.update_type = 2)))
  GROUP BY measure_trackedmodel.version_group_id
  WITH NO DATA;


ALTER MATERIALIZED VIEW duty_sentences OWNER TO postgres;

"""

geo_area_sql = """

CREATE MATERIALIZED VIEW geo_areas_geographicalareadescription__now AS
 WITH RECURSIVE cte AS (
         SELECT common_tracked_models.id,
            common_tracked_models.polymorphic_ctype_id,
            common_tracked_models.transaction_id,
            common_tracked_models.update_type,
            common_tracked_models.version_group_id,
            geo_area_descriptions.trackedmodel_ptr_id,
            geo_area_descriptions.validity_start,
            geo_area_descriptions.sid,
            geo_areas.trackedmodel_ptr_id AS described_geo_area_id,
            geo_area_descriptions.description,
            ((NULLIF(max(geo_area_descriptions.validity_start) OVER (PARTITION BY geo_areas.sid ORDER BY geo_area_descriptions.validity_start ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING), geo_area_descriptions.validity_start) - '1 day'::interval))::date AS validity_end,
            daterange(geo_area_descriptions.validity_start, ((NULLIF(max(geo_area_descriptions.validity_start) OVER (PARTITION BY geo_areas.sid ORDER BY geo_area_descriptions.validity_start ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING), geo_area_descriptions.validity_start) - '1 day'::interval))::date, '[]'::text) AS valid_between
           FROM (((((geo_areas_geographicalareadescription geo_area_descriptions
             JOIN common_trackedmodel common_tracked_models ON ((geo_area_descriptions.trackedmodel_ptr_id = common_tracked_models.id)))
             JOIN common_versiongroup common_version_groups ON ((common_tracked_models.id = common_version_groups.current_version_id)))
             JOIN common_trackedmodel described_geo_area__tracked_models ON ((geo_area_descriptions.described_geographicalarea_id = described_geo_area__tracked_models.id)))
             JOIN common_versiongroup described_geo_area__version_groups ON ((described_geo_area__tracked_models.version_group_id = described_geo_area__version_groups.id)))
             JOIN geo_areas_geographicalarea geo_areas ON ((described_geo_area__version_groups.current_version_id = geo_areas.trackedmodel_ptr_id)))
          WHERE ((common_version_groups.id IS NOT NULL) AND (NOT (common_tracked_models.update_type = 2)))
          ORDER BY geo_area_descriptions.validity_start
        )
 SELECT described_geo_area_id,
    description
   FROM cte
  WHERE ((upper(valid_between) > CURRENT_DATE) OR (upper(valid_between) IS NULL))
  WITH NO DATA;


ALTER MATERIALIZED VIEW geo_areas_geographicalareadescription__now OWNER TO postgres;

"""

exclusion_sql = """

CREATE MATERIALIZED VIEW exclusions AS
 SELECT measure_version_groups.current_version_id AS modified_measure_id,
    string_agg((geo_areas_geographicalareadescription__now.description)::text, '|'::text ORDER BY geo_areas.area_id) AS descriptions,
    string_agg((geo_areas.area_id)::text, '|'::text ORDER BY (geo_areas.area_id)::text) AS area_ids
   FROM ((((((((measures_measureexcludedgeographicalarea measure_excluded_geo_areas
     JOIN common_trackedmodel measure_tracked_models ON ((measure_excluded_geo_areas.modified_measure_id = measure_tracked_models.id)))
     JOIN common_versiongroup measure_version_groups ON ((measure_tracked_models.version_group_id = measure_version_groups.id)))
     JOIN common_trackedmodel geo_area_tracked_models ON ((measure_excluded_geo_areas.excluded_geographical_area_id = geo_area_tracked_models.id)))
     JOIN common_versiongroup geo_area_version_groups ON ((geo_area_tracked_models.version_group_id = geo_area_version_groups.id)))
     JOIN geo_areas_geographicalarea geo_areas ON ((geo_area_version_groups.current_version_id = geo_areas.trackedmodel_ptr_id)))
     JOIN geo_areas_geographicalareadescription__now ON ((geo_areas.trackedmodel_ptr_id = geo_areas_geographicalareadescription__now.described_geo_area_id)))
     JOIN common_trackedmodel common_tracked_models ON ((measure_excluded_geo_areas.trackedmodel_ptr_id = common_tracked_models.id)))
     JOIN common_versiongroup common_version_groups ON ((common_tracked_models.id = common_version_groups.current_version_id)))
  WHERE ((common_version_groups.id IS NOT NULL) AND (NOT (common_tracked_models.update_type = 2)))
  GROUP BY measure_version_groups.current_version_id
  WITH NO DATA;


ALTER MATERIALIZED VIEW exclusions OWNER TO postgres;

"""

footnotes_sql = """

CREATE MATERIALIZED VIEW footnotes__expanded AS
 SELECT measure_footnotes.footnoted_measure_id,
    string_agg(concat(footnote_types.footnote_type_id, footnotes.footnote_id), '|'::text ORDER BY footnote_types.footnote_type_id, footnotes.footnote_id) AS footnote_ids
   FROM ((((measures_footnoteassociationmeasure measure_footnotes
     JOIN footnotes_footnote footnotes ON ((measure_footnotes.associated_footnote_id = footnotes.trackedmodel_ptr_id)))
     JOIN footnotes_footnotetype footnote_types ON ((footnotes.footnote_type_id = footnote_types.trackedmodel_ptr_id)))
     JOIN common_trackedmodel common_tracked_models ON ((measure_footnotes.trackedmodel_ptr_id = common_tracked_models.id)))
     JOIN common_versiongroup common_version_groups ON ((common_tracked_models.id = common_version_groups.current_version_id)))
  WHERE ((common_version_groups.id IS NOT NULL) AND (NOT (common_tracked_models.update_type = 2)))
  GROUP BY measure_footnotes.footnoted_measure_id
  WITH NO DATA;


ALTER MATERIALIZED VIEW footnotes__expanded OWNER TO postgres;

"""

measures_now_sql = """

CREATE MATERIALIZED VIEW measures__now AS
 SELECT measures_measure.trackedmodel_ptr_id,
    measures_measure.valid_between,
    measures_measure.sid,
    measures_measure.dead_additional_code,
    measures_measure.dead_order_number,
    measures_measure.reduction,
    measures_measure.stopped,
    measures_measure.export_refund_nomenclature_sid,
    measures_measure.additional_code_id,
    measures_measure.generating_regulation_id,
    measures_measure.geographical_area_id,
    measures_measure.goods_nomenclature_id,
    measures_measure.measure_type_id,
    measures_measure.order_number_id,
    measures_measure.terminating_regulation_id,
    common_trackedmodel.version_group_id
   FROM ((measures_measure
     JOIN common_trackedmodel ON ((measures_measure.trackedmodel_ptr_id = common_trackedmodel.id)))
     JOIN common_versiongroup ON ((measures_measure.trackedmodel_ptr_id = common_versiongroup.current_version_id)))
  WHERE ((measures_measure.sid >= 20000000) 
AND (NOT (common_trackedmodel.update_type = 2)) 
AND (common_versiongroup.current_version_id IS NOT NULL) 
AND ((upper(measures_measure.valid_between) > CURRENT_DATE) 
OR (upper(measures_measure.valid_between) IS NULL)))
  WITH NO DATA;


ALTER MATERIALIZED VIEW measures__now OWNER TO postgres;

"""

active_measure_sql = """

CREATE MATERIALIZED VIEW exporter_active_measures AS
 SELECT measures__now.trackedmodel_ptr_id,
    commodities.sid AS commodity_sid,
    commodities.item_id AS commodity_code,
    commodities_goodsnomenclatureindent__now.indent AS commodity_indent,
    commodities_goodsnomenclaturedescription__now.description AS commodity_description,
    measures__now.sid AS measure_sid,
    measure_types.sid AS measure_type_id,
    measure_types.description AS measure_type_description,
    NULLIF(concat(additional_codes.type_id, additional_codes.code), ''::text) AS measure_additional_code_code,
    additional_codes.description AS measure_additional_code_description,
    duty_sentences.duty_sentence AS measure_duty_expression,
    lower(measures__now.valid_between) AS measure_effective_start_date,
    upper(measures__now.valid_between) AS measure_effective_end_date,
    measures__now.reduction AS measure_reduction_indicator,
    footnotes.footnote_ids AS measure_footnotes,
    conditions.condition_text AS measure_conditions,
    geo_areas.sid AS measure_geographical_area_sid,
    geo_areas.area_id AS measure_geographical_area_id,
    geo_areas_geographicalareadescription__now.description AS measure_geographical_area_description,
    exclusions.area_ids AS measure_excluded_geographical_areas_ids,
    exclusions.descriptions AS measure_excluded_geographical_areas_descriptions,
    COALESCE(quota_order_numbers.order_number, measures__now.dead_order_number) AS measure_quota_order_number,
    regulations.public_identifier AS measure_regulation_id,
    regulations.url AS measure_regulation_url
   FROM (((((((((((((((((((((((measures__now
     LEFT JOIN exclusions ON ((measures__now.trackedmodel_ptr_id = exclusions.modified_measure_id)))
     LEFT JOIN conditions ON ((measures__now.trackedmodel_ptr_id = conditions.current_dependent_measure_id)))
     LEFT JOIN footnotes__expanded footnotes ON ((measures__now.trackedmodel_ptr_id = footnotes.footnoted_measure_id)))
     JOIN common_trackedmodel commodities__tracked_models ON ((measures__now.goods_nomenclature_id = commodities__tracked_models.id)))
     JOIN common_versiongroup commodities__version_groups ON ((commodities__tracked_models.version_group_id = commodities__version_groups.id)))
     JOIN commodities_goodsnomenclature commodities ON ((commodities__version_groups.current_version_id = commodities.trackedmodel_ptr_id)))
     JOIN commodities_goodsnomenclaturedescription__now ON ((commodities.trackedmodel_ptr_id = commodities_goodsnomenclaturedescription__now.described_goods_nomenclature_id)))
     JOIN commodities_goodsnomenclatureindent__now ON ((commodities.trackedmodel_ptr_id = commodities_goodsnomenclatureindent__now.indented_goods_nomenclature_id)))
     LEFT JOIN additional_codes__expanded additional_codes ON ((measures__now.additional_code_id = additional_codes.trackedmodel_ptr_id)))
     JOIN common_trackedmodel regulation__tracked_models ON ((measures__now.generating_regulation_id = regulation__tracked_models.id)))
     JOIN common_versiongroup regulation__version_groups ON ((regulation__tracked_models.version_group_id = regulation__version_groups.id)))
     JOIN regulations_regulation regulations ON ((regulation__version_groups.current_version_id = regulations.trackedmodel_ptr_id)))
     LEFT JOIN duty_sentences ON ((measures__now.version_group_id = duty_sentences.version_group_id)))
     JOIN common_trackedmodel measure_type__tracked_models ON ((measures__now.measure_type_id = measure_type__tracked_models.id)))
     JOIN common_versiongroup measure_type__version_groups ON ((measure_type__tracked_models.version_group_id = measure_type__version_groups.id)))
     JOIN measures_measuretype measure_types ON ((measure_type__version_groups.current_version_id = measure_types.trackedmodel_ptr_id)))
     JOIN common_trackedmodel geo_areas__tracked_models ON ((measures__now.geographical_area_id = geo_areas__tracked_models.id)))
     JOIN common_versiongroup geo_areas__version_groups ON ((geo_areas__tracked_models.version_group_id = geo_areas__version_groups.id)))
     JOIN geo_areas_geographicalarea geo_areas ON ((geo_areas__version_groups.current_version_id = geo_areas.trackedmodel_ptr_id)))
     JOIN geo_areas_geographicalareadescription__now ON ((geo_areas__version_groups.current_version_id = geo_areas_geographicalareadescription__now.described_geo_area_id)))
     LEFT JOIN common_trackedmodel order_number__tracked_models ON ((measures__now.order_number_id = order_number__tracked_models.id)))
     LEFT JOIN common_versiongroup order_number__version_groups ON ((order_number__tracked_models.version_group_id = order_number__version_groups.id)))
     LEFT JOIN quotas_quotaordernumber quota_order_numbers ON ((order_number__version_groups.current_version_id = quota_order_numbers.trackedmodel_ptr_id)))
  WITH NO DATA;


ALTER MATERIALIZED VIEW exporter_active_measures OWNER TO postgres;


"""


class Migration(migrations.Migration):

    dependencies = [
        ("exporter", "0004_upload_created_date"),
    ]
    operations = [
        migrations.RunSQL(additional_codes__expanded_sql),
        migrations.RunSQL(commodities_sql),
        migrations.RunSQL(indent_sql),
        migrations.RunSQL(conditions_sql),
        migrations.RunSQL(duty_sentence_sql),
        migrations.RunSQL(geo_area_sql),
        migrations.RunSQL(exclusion_sql),
        migrations.RunSQL(footnotes_sql),
        migrations.RunSQL(measures_now_sql),
        migrations.RunSQL(active_measure_sql),
    ]
