import logging
import sys
from datetime import timedelta

from django.conf import settings
from django.contrib.auth.models import User
from django.core.management.base import BaseCommand
from psycopg2._range import DateTimeTZRange

from common.renderers import counter_generator
from common.validators import UpdateType
from geo_areas.models import GeographicalArea
from importer.management.commands.patterns import BREXIT
from importer.management.commands.utils import EnvelopeSerializer, add_geo_area_members, terminate_geo_area_members
from measures.models import Measure, MeasureExcludedGeographicalArea
from quotas.models import QuotaOrderNumberOrigin, QuotaOrderNumberOriginExclusion, QuotaOrderNumber
from workbaskets.models import WorkBasket
from workbaskets.validators import WorkflowStatus

logger = logging.getLogger(__name__)

BREXIT_TO_INFINITY = DateTimeTZRange(BREXIT, None)

'''
with orders (id) as (VALUES
	('050006'),
	('050007'),
	('050008'),
	('050009'),
	('050013'),
	('050023'),
	('050027'),
	('050035'),
	('050039'),
	('050040'),
	('050041'),
	('050043'),
	('050046'),
	('050047'),
	('050053'),
	('050055'),
	('050056'),
	('050058'),
	('050059'),
	('050060'),
	('050061'),
	('050062'),
	('050063'),
	('050067'),
	('050070'),
	('050071'),
	('050072'),
	('050073'),
	('050076'),
	('050083'),
	('050085'),
	('050086'),
	('050088'),
	('050089'),
	('050092'),
	('050093'),
	('050094'),
	('050095'),
	('050097'),
	('050098'),
	('050118'),
	('050120'),
	('050123'),
	('050128'),
	('050131'),
	('050132'),
	('050138'),
	('050144'),
	('050145'),
	('050147'),
	('050151'),
	('050154'),
	('050156'),
	('050157'),
	('050158'),
	('050707'),
	('052016'),
	('054003'),
	('054038'),
	('054067'),
	('054068'),
	('054069'),
	('054106'),
	('054119'),
	('054125'),
	('054130'),
	('054131'),
	('054148'),
	('054154'),
	('054166'),
	('054168'),
	('054213'),
	('054216'),
	('054218'),
	('054260'),
	('054263'),
	('054264'),
	('054265'),
	('054320'),
	('054412'),
	('054422'),
	('054595')
) 
select distinct quota_order_number_origin_sid
from 
quota_order_numbers t1
left join quota_order_number_origins t2 using (quota_order_number_sid)
left join quota_order_number_origin_exclusions t3 using (quota_order_number_origin_sid) 
where quota_order_number_id in (select id from orders)
'''
QUOTA_ORIGIN_SIDS = [
    '20791',
    '20792',
    '20793',
    '20794',
    '20795',
    '20796',
    '20797',
    '20798',
    '20799',
    '20800',
    '20801',
    '20802',
    '20803',
    '20804',
    '20805',
    '20806',
    '20807',
    '20808',
    '20809',
    '20810',
    '20811',
    '20812',
    '20813',
    '20814',
    '20815',
    '20816',
    '20817',
    '20818',
    '20819',
    '20820',
    '20821',
    '20822',
    '20823',
    '20824',
    '20825',
    '20826',
    '20827',
    '20828',
    '20830',
    '20831',
    '20832',
    '20833',
    '20834',
    '20838',
    '20840',
    '20841',
    '20842',
    '20843',
    '20844',
    '20845',
    '20846',
    '20847',
    '20848',
    '20849',
    '20850',
    '20853',
    '20860',
]
'''
with orders (id) as (VALUES
	('050006'),
	('050007'),
	('050008'),
	('050009'),
	('050013'),
	('050023'),
	('050027'),
	('050035'),
	('050039'),
	('050040'),
	('050041'),
	('050043'),
	('050046'),
	('050047'),
	('050053'),
	('050055'),
	('050056'),
	('050058'),
	('050059'),
	('050060'),
	('050061'),
	('050062'),
	('050063'),
	('050067'),
	('050070'),
	('050071'),
	('050072'),
	('050073'),
	('050076'),
	('050083'),
	('050085'),
	('050086'),
	('050088'),
	('050089'),
	('050092'),
	('050093'),
	('050094'),
	('050095'),
	('050097'),
	('050098'),
	('050118'),
	('050120'),
	('050123'),
	('050128'),
	('050131'),
	('050132'),
	('050138'),
	('050144'),
	('050145'),
	('050147'),
	('050151'),
	('050154'),
	('050156'),
	('050157'),
	('050158'),
	('050707'),
	('052016'),
	('054003'),
	('054038'),
	('054067'),
	('054068'),
	('054069'),
	('054106'),
	('054119'),
	('054125'),
	('054130'),
	('054131'),
	('054148'),
	('054154'),
	('054166'),
	('054168'),
	('054213'),
	('054216'),
	('054218'),
	('054260'),
	('054263'),
	('054264'),
	('054265'),
	('054320'),
	('054412'),
	('054422'),
	('054595')
) select distinct measure_sid from measures 
left join measure_excluded_geographical_areas using (measure_sid)
where ordernumber in (select id from orders)
'''
MEASURE_SIDS = [
    '20124401',
    '20124406',
    '20124413',
    '20124416',
    '20124417',
    '20124418',
    '20124419',
    '20124420',
    '20124421',
    '20124422',
    '20124423',
    '20124424',
    '20124425',
    '20124426',
    '20124427',
    '20124428',
    '20124429',
    '20124430',
    '20124431',
    '20124432',
    '20124433',
    '20124434',
    '20124435',
    '20124436',
    '20124437',
    '20124438',
    '20124439',
    '20124440',
    '20124441',
    '20124446',
    '20124459',
    '20124464',
    '20124465',
    '20124466',
    '20124467',
    '20124468',
    '20124469',
    '20124470',
    '20124471',
    '20124472',
    '20124473',
    '20124474',
    '20124475',
    '20124476',
    '20124477',
    '20124478',
    '20124479',
    '20124480',
    '20124481',
    '20124482',
    '20124483',
    '20124484',
    '20124485',
    '20124486',
    '20124487',
    '20124488',
    '20124493',
    '20124498',
    '20124499',
    '20124500',
    '20124501',
    '20124502',
    '20124503',
    '20124504',
    '20124505',
    '20124506',
    '20124507',
    '20124508',
    '20124509',
    '20124510',
    '20124511',
    '20124512',
    '20124513',
    '20124514',
    '20124515',
    '20124516',
    '20124517',
    '20124518',
    '20124519',
    '20124520',
    '20124521',
    '20124522',
    '20124528',
    '20124534',
    '20124535',
    '20124536',
    '20124537',
    '20124538',
    '20124539',
    '20124540',
    '20124541',
    '20124542',
    '20124543',
    '20124544',
    '20124545',
    '20124546',
    '20124547',
    '20124548',
    '20124549',
    '20124550',
    '20124551',
    '20124552',
    '20124553',
    '20124554',
    '20124555',
    '20124556',
    '20124557',
    '20124559',
    '20124561',
    '20124562',
    '20124563',
    '20124564',
    '20124565',
    '20124566',
    '20124567',
    '20124568',
    '20124569',
    '20124570',
    '20124571',
    '20124572',
    '20124574',
    '20124575',
    '20124577',
    '20124578',
    '20124580',
    '20124581',
    '20124583',
    '20124584',
    '20124586',
    '20124587',
    '20124589',
    '20124590',
    '20124591',
    '20124592',
    '20124593',
    '20124595',
    '20124596',
    '20124597',
    '20124599',
    '20124600',
    '20124601',
    '20124603',
    '20124604',
    '20124606',
    '20124607',
    '20124609',
    '20124610',
    '20124612',
    '20124613',
    '20124615',
    '20124616',
    '20124618',
    '20124619',
    '20124621',
    '20124622',
    '20124624',
    '20124625',
    '20124626',
    '20124628',
    '20124629',
    '20124630',
    '20124632',
    '20124633',
    '20124634',
    '20124635',
    '20124636',
    '20124638',
    '20124639',
    '20124641',
    '20124642',
    '20124652',
    '20124661',
    '20124670',
    '20124715',
    '20124724',
    '20124733',
    '20124760',
    '20124769',
    '20124778',
    '20124787',
    '20124796',
    '20124823',
    '20124832',
    '20124841',
    '20124850',
    '20124859',
    '20124909',
    '20124915',
    '20124921',
    '20124927',
    '20124928',
    '20124929',
    '20124930',
    '20124931',
    '20124932',
    '20124933',
    '20124934',
    '20124935',
    '20124936',
    '20124937',
    '20124938',
    '20124939',
    '20124940',
    '20124941',
    '20124942',
    '20124943',
    '20124944',
    '20124945',
    '20124946',
    '20124947',
    '20124948',
    '20124949',
    '20124950',
    '20124951',
    '20124952',
    '20124953',
    '20124954',
    '20124955',
    '20124956',
    '20124957',
    '20124958',
    '20124959',
    '20124960',
    '20124961',
    '20124962',
    '20124963',
    '20124964',
    '20124965',
    '20124966',
    '20124967',
    '20124968',
    '20124969',
    '20124970',
    '20124971',
    '20124972',
    '20124973',
    '20124974',
    '20124975',
    '20124976',
    '20124977',
    '20124978',
    '20124979',
    '20124980',
    '20124981',
    '20124982',
    '20124983',
    '20124984',
    '20124987',
    '20124988',
    '20124989',
    '20124990',
    '20124993',
    '20124994',
    '20124997',
    '20124998',
    '20125000',
    '20125001',
    '20125003',
    '20125004',
    '20125006',
    '20125009',
    '20125010',
    '20125011',
    '20125012',
    '20125013',
    '20125014',
    '20125015',
    '20125016',
    '20125017',
    '20125018',
    '20125019',
    '20125020',
    '20125021',
    '20125022',
    '20125023',
    '20125024',
    '20125025',
    '20125026',
    '20125027',
    '20125028',
    '20125029',
    '20125030',
    '20125031',
    '20125032',
    '20125033',
    '20125034',
    '20125035',
    '20125036',
    '20125037',
    '20125038',
    '20125039',
    '20125040',
    '20125041',
    '20125042',
    '20125043',
    '20125044',
    '20125045',
    '20125046',
    '20125047',
    '20125048',
    '20125049',
    '20125050',
    '20125051',
    '20125052',
    '20125053',
    '20125054',
    '20125055',
    '20125056',
    '20125057',
    '20125058',
    '20125059',
    '20125060',
    '20125061',
    '20125062',
    '20125063',
    '20125064',
    '20125065',
    '20125066',
    '20125067',
    '20125068',
    '20125069',
    '20125070',
    '20125071',
    '20125072',
    '20125073',
    '20125074',
    '20125075',
    '20125076',
    '20125077',
    '20125081',
    '20125083',
    '20125088',
    '20125089',
    '20125090',
    '20125091',
    '20125092',
    '20125093',
    '20125094',
    '20125095',
    '20125097',
    '20125098',
    '20125099',
    '20125100',
    '20125101',
    '20125105',
    '20125109',
    '20125111',
    '20125114',
    '20125118',
    '20125122',
    '20125126',
    '20125130',
    '20125131',
    '20125132',
    '20125133',
    '20125134',
    '20125135',
    '20125136',
    '20125137',
    '20125138',
    '20125139',
    '20125140',
    '20125141',
    '20125142',
    '20125145',
    '20125148',
    '20125151',
    '20125154',
    '20125155',
    '20125156',
    '20125157',
    '20125158',
    '20125159',
    '20125160',
    '20125161',
    '20125162',
    '20125166',
    '20125171',
    '20125172',
    '20125173',
    '20125178',
    '20125179',
    '20125180',
    '20125181',
    '20125182',
    '20125183',
    '20125184',
    '20125185',
    '20125186',
    '20125187',
    '20125188',
    '20125189',
    '20125191',
    '20125192',
    '20125193',
    '20125198',
    '20125201',
    '20125202',
    '20125203',
    '20125209',
    '20125213',
    '20125215',
    '20125216',
    '20125218',
    '20125219',
    '20125220',
    '20125221',
    '20125226',
    '20125230',
    '20125231',
    '20125232',
    '20125233',
    '20125234',
    '20125235',
    '20125236',
    '20125237',
    '20125238',
    '20125239',
    '20125240',
    '20125241',
    '20125242',
    '20125243',
    '20125244',
    '20125245',
    '20125246',
    '20125247',
    '20125248',
    '20125249',
    '20125250',
    '20125251',
    '20125252',
    '20125253',
    '20125254',
    '20125255',
    '20125256',
    '20125257',
    '20125258',
    '20125259',
    '20125260',
    '20125261',
    '20125262',
    '20125263',
    '20125264',
    '20125265',
    '20125266',
    '20125267',
    '20125268',
    '20125269',
    '20125270',
    '20125271',
    '20125272',
    '20125273',
    '20125274',
    '20125275',
    '20125276',
    '20125277',
    '20125278',
    '20125279',
    '20125280',
    '20125281',
    '20125282',
    '20125283',
    '20125284',
    '20125285',
    '20125286',
    '20125287',
    '20125288',
    '20125289',
    '20125290',
    '20125291',
    '20125292',
    '20125293',
    '20125294',
    '20125295',
    '20125296',
    '20125297',
    '20125298',
    '20125299',
    '20125300',
    '20125301',
    '20125302',
    '20125303',
    '20125304',
    '20125305',
    '20125306',
    '20125307',
    '20125308',
    '20125309',
    '20125310',
    '20125311',
    '20125312',
    '20125313',
    '20125314',
    '20125315',
    '20125318',
    '20125319',
    '20125320',
    '20125321',
    '20125322',
    '20125323',
    '20125324',
    '20125325',
    '20125326',
    '20125327',
    '20125328',
    '20125329',
    '20125330',
    '20125331',
    '20125332',
    '20125333',
    '20125334',
    '20125335',
    '20125336',
    '20125337',
    '20125338',
    '20125339',
    '20125340',
    '20125341',
    '20125342',
    '20125343',
    '20125344',
    '20125345',
    '20125346',
    '20125347',
    '20125348',
    '20125349',
    '20125350',
    '20125351',
    '20125352',
    '20125353',
    '20125354',
    '20125355',
    '20125356',
    '20125357',
    '20125358',
    '20125359',
    '20125360',
    '20125361',
    '20125362',
    '20125363',
    '20125364',
    '20125365',
    '20125366',
    '20125367',
    '20125368',
    '20125369',
    '20125370',
    '20125371',
    '20125372',
    '20125373',
    '20125374',
    '20125375',
]
EU_MEMBER_SIDS = [
    36,
    47,
    90,
    91,
    92,
    104,
    106,
    117,
    118,
    122,
    148,
    153,
    169,
    195,
    236,
    256,
    264,
    265,
    266,
    270,
    317,
    340,
    390,
    395,
    397,
    403,
    428,
    430,
]   # 349

class Command(BaseCommand):
    help = "Adjust geo areas"

    def add_arguments(self, parser):
        parser.add_argument(
            "--transaction-id",
            help="The ID value to use for the first transaction",
            type=int,
            default=140,
        )
        parser.add_argument(
            "--envelope-id",
            help="The ID value to use for the envelope",
            type=int,
            default=1,
        )
        parser.add_argument(
            "--output", help="The filename to output to.", type=str, default="out.xml"
        )

    def handle(self, *args, **options):
        username = settings.DATA_IMPORT_USERNAME
        try:
            author = User.objects.get(username=username)
        except User.DoesNotExist:
            sys.exit(
                f"Author does not exist, create user '{username}'"
                " or edit settings.DATA_IMPORT_USERNAME"
            )
        workbasket, _ = WorkBasket.objects.get_or_create(
            title=f"Adjust geo areas",
            author=author,
            status=WorkflowStatus.PUBLISHED,
        )

        with open(options["output"], mode="wb") as output:
            with EnvelopeSerializer(
                output,
                envelope_id=options["envelope_id"],
                transaction_counter=counter_generator(options["transaction_id"]),
                message_counter=counter_generator(start=1),
                max_envelope_size_in_mb=30,
            ) as env:
                for transaction in self.create_transactions(workbasket):
                    # for model in transaction:
                    #     model.save()
                    #     pass
                    env.render_transaction(transaction)

    def create_transactions(self, workbasket):
        # yield list(terminate_geo_area_members(
        #     end_date=BREXIT - timedelta(days=1),
        #     workbasket=workbasket,
        #     group_area_sid=445,
        #     member_area_sids=[
        #         314,  # Anguilla
        #         258,  # Bermuda
        #         150,  # Falkland Islands
        #         31,   # South Georgia and South Sandwich Islands
        #         155,  # British Indian Ocean Territory
        #         219,  # Cayman Islands
        #         406,  # Montserrat
        #         143,  # Pitcairn, Henderson, Ducie and Oeno Islands
        #         40,   # Saint Helena, Ascension and Tristan da Cunha
        #         384,  # Turks and Caicos Islands
        #         391,  # British Virgin Islands
        #     ]
        # ))

        # add eu members to "Erga Omnes"
        yield list(add_geo_area_members(
            valid_between=BREXIT_TO_INFINITY,
            workbasket=workbasket,
            group_area=445,
            member_area_sids=[
                314,  # Anguilla
                258,  # Bermuda
                150,  # Falkland Islands
                31,   # South Georgia and South Sandwich Islands
                155,  # British Indian Ocean Territory
                219,  # Cayman Islands
                406,  # Montserrat
                143,  # Pitcairn, Henderson, Ducie and Oeno Islands
                40,   # Saint Helena, Ascension and Tristan da Cunha
                384,  # Turks and Caicos Islands
                391,  # British Virgin Islands
            ],
        ))

        yield list(terminate_geo_area_members(
            end_date=None,
            workbasket=workbasket,
            group_area_sid=349,
            member_area_sids=[
                360,     # Northern Ireland
            ],
            delete=True,
        ))

        def create_quota_origin_exclusion(
                quota_order_number_origin_sid,
                area_sid,
                workbasket,
        ):
            quota_order_number_origin = QuotaOrderNumberOrigin(
                sid=quota_order_number_origin_sid,
            )
            return QuotaOrderNumberOriginExclusion(
                origin=quota_order_number_origin,
                excluded_geographical_area=GeographicalArea.objects.get(
                    sid=area_sid,
                ),
                update_type=UpdateType.CREATE,
                workbasket=workbasket,
            )

        def create_measure_exclusion(
                measure_sid,
                area_sid,
                workbasket,
        ):
            measure = Measure(
                sid=measure_sid
            )
            return MeasureExcludedGeographicalArea(
                modified_measure=measure,
                excluded_geographical_area=GeographicalArea.objects.get(
                    sid=area_sid,
                ),
                update_type=UpdateType.CREATE,
                workbasket=workbasket,
            )

        for quota_origin_sid in QUOTA_ORIGIN_SIDS:
            exclusions = []
            for member in EU_MEMBER_SIDS:
                exclusions.append(create_quota_origin_exclusion(
                    quota_order_number_origin_sid=quota_origin_sid,
                    area_sid=member,
                    workbasket=workbasket,
                ))
            yield exclusions

        for measure_sid in MEASURE_SIDS:
            exclusions = []
            for member in EU_MEMBER_SIDS:
                exclusions.append(create_measure_exclusion(
                    measure_sid=measure_sid,
                    area_sid=member,
                    workbasket=workbasket,
                ))
            yield exclusions

